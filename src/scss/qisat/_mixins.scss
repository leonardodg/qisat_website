
// antialiasing mode font rendering

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}



/* 'clear
============================================ */
    %clearfix {
      *zoom: 1;
      &:before, &:after {
        content: " ";
        display: table;
      }
      &:after {
        clear: both;
      }
    }

    /*
      .container-with-floated-children {
        @extend %clearfix;
      }
    */
/* 'end clear
============================================ */



@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
//.box { @include border-radius(10px); }





// generic transform
@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
   @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    -moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}





/* Set a rem font size with pixel fallback
============================================ */
    @function calculateRem($size) {
      $remSize: $size / 16px;
      @return $remSize * 1rem;
    }

    @mixin font-size($size) {
      font-size: $size;
      font-size: calculateRem($size);
    }

    /*  USAGE
        p {
          @include font-size(14px)
        }
    */
/* 'end Set a rem font size with pixel fallback
============================================ */
